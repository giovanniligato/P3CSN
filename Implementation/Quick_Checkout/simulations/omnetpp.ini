[General]
network = SuperMarket
sim-time-limit = 60s * 60 * 24
num-rngs = 3
SuperMarket.source.rng-0 = 0
SuperMarket.source.rng-1 = 1
SuperMarket.checkout.classifier.rng-0 = 2


# Consistency Test ----------------------------------------

[ConsistencyTest]
sim-time-limit = 60s * 60 * 24
repeat = 30
seed-set = ${repetition}
SuperMarket.C = 4
SuperMarket.checkout.p = 0.5
SuperMarket.checkout.queues[*].serviceTime = 3s
SuperMarket.checkout.classifier.policy = "jtsq"
SuperMarket.checkout.queues[*].queueingTime.result-recording-modes = +vector  # default plus vector

[Slow]
extends = ConsistencyTest
SuperMarket.checkout.classifier.K = 16
SuperMarket.source.interArrivalTime = exponential(60s, 0)
SuperMarket.source.numberOfItems = (exponential(39, 1)+1)

[Balanced]
extends = ConsistencyTest
SuperMarket.checkout.classifier.K = 8
SuperMarket.source.interArrivalTime = exponential(30s, 0)
SuperMarket.source.numberOfItems = (exponential(19, 1)+1)

[Fast]
extends = ConsistencyTest
SuperMarket.checkout.classifier.K = 4
SuperMarket.source.interArrivalTime = exponential(15s, 0)
SuperMarket.source.numberOfItems = (exponential(9, 1)+1)

# ---------------------------------------------------------


# Degeneracy Tests ----------------------------------------

[DegeneracyTest]
sim-time-limit = 60s * 60 * 24
repeat = 30
seed-set = ${repetition}
SuperMarket.C = 4
SuperMarket.checkout.queues[*].serviceTime = 3s
SuperMarket.checkout.classifier.policy = "jtsq"
SuperMarket.source.interArrivalTime = exponential(30s, 0)
SuperMarket.source.numberOfItems = (exponential(19, 1)+1)

# 1st Degeneracy Test
[K0]
extends = DegeneracyTest
SuperMarket.checkout.p = 0.5
SuperMarket.checkout.classifier.K = 0

# 2nd Degeneracy Test
[K1000]
extends = DegeneracyTest
SuperMarket.checkout.p = 0.5
SuperMarket.checkout.classifier.K = 1000

# 3rd Degeneracy Test
[p0]
extends = DegeneracyTest
SuperMarket.checkout.p = 0
SuperMarket.checkout.classifier.K = 0

# 4th Degeneracy Test
[p1]
extends = DegeneracyTest
SuperMarket.checkout.p = 1
SuperMarket.checkout.classifier.K = 0

# ---------------------------------------------------------


# Continuity Test -----------------------------------------

[ContinuityTest]
sim-time-limit = 60s * 60 * 24
repeat = 30
seed-set = ${repetition}
SuperMarket.C = 4
SuperMarket.checkout.p = 0.5
SuperMarket.checkout.classifier.K = 8
SuperMarket.checkout.queues[*].serviceTime = 3s
SuperMarket.checkout.classifier.policy = "jtsq"
SuperMarket.source.interArrivalTime = ${exponential(30s, 0), exponential(31s, 0), exponential(32s, 0), exponential(33s, 0), exponential(34s, 0), exponential(35s, 0)}
SuperMarket.source.numberOfItems = (exponential(19, 1)+1)
SuperMarket.globalSink.totalQueueingTime.result-recording-modes = +vector  # default plus vector


# ---------------------------------------------------------


# Verification Against the Theoretical Model --------------

[VerificationTheoreticalModel]
sim-time-limit = 60s * 60 * 24
repeat = 30
seed-set = ${repetition}
SuperMarket.C = 4
SuperMarket.checkout.p = 0.5
SuperMarket.checkout.queues[*].serviceTime = 3s
SuperMarket.checkout.classifier.policy = "equallylikely"
SuperMarket.checkout.queues[*].queueingTime.result-recording-modes = +vector  # default plus vector

# Exponential
[VTM-Exponential]
extends = VerificationTheoreticalModel
SuperMarket.checkout.classifier.K = 8
SuperMarket.source.interArrivalTime = exponential(40s, 0)
SuperMarket.source.numberOfItems = (exponential(14, 1)+1)

# Lognormal
[VTM-Lognormal]
extends = VerificationTheoreticalModel
SuperMarket.checkout.classifier.K = 8
SuperMarket.source.interArrivalTime = exponential(40s, 0)
SuperMarket.source.numberOfItems = (lognormal(2.29248, 0.83255, 1)+1)

# ---------------------------------------------------------


# Calibration ---------------------------------------------

[Calibration]
sim-time-limit = 60s * 60 * 24
repeat = 30
seed-set = ${repetition}
SuperMarket.C = 10
SuperMarket.checkout.p = 0
SuperMarket.checkout.classifier.K = 0
SuperMarket.checkout.queues[*].serviceTime = 3s
SuperMarket.checkout.classifier.policy = "jtsq"
SuperMarket.source.numberOfItems = (exponential(29, 1)+1)
SuperMarket.globalSink.totalQueueingTime.result-recording-modes = +vector  # default plus vector

# First
[FirstCalibration]
extends = Calibration
SuperMarket.source.interArrivalTime = ${exponential(10s, 0), exponential(15s, 0), exponential(20s, 0), exponential(25s, 0), exponential(30s, 0), exponential(35s, 0), exponential(40s, 0)}

# Second
[SecondCalibration]
extends = Calibration
SuperMarket.source.interArrivalTime = ${exponential(9.1s, 0), exponential(9.2s, 0), exponential(9.3s, 0), exponential(9.4s, 0), exponential(9.5s, 0), exponential(9.6s, 0), exponential(9.7s, 0)}

# Lognormal
[CalibrationLognormal]
sim-time-limit = 60s * 60 * 24
repeat = 30
seed-set = ${repetition}
SuperMarket.C = 10
SuperMarket.checkout.p = 0
SuperMarket.checkout.classifier.K = 0
SuperMarket.checkout.queues[*].serviceTime = 3s
SuperMarket.checkout.classifier.policy = "jtsq"
SuperMarket.source.interArrivalTime = ${exponential(9.1s, 0), exponential(9.2s, 0), exponential(9.3s, 0), exponential(9.4s, 0), exponential(9.5s, 0), exponential(9.6s, 0), exponential(9.7s, 0)}
SuperMarket.source.numberOfItems = (lognormal(3.02072, 0.83255, 1)+1)
SuperMarket.globalSink.totalQueueingTime.result-recording-modes = +vector  # default plus vector

# ---------------------------------------------------------


# Warmup-Period -------------------------------------------

[Warmup-Period]
sim-time-limit = 60s * 60 * 24
repeat = 30
seed-set = ${repetition}
SuperMarket.C = 10
SuperMarket.checkout.p = 0
SuperMarket.checkout.classifier.K = 0
SuperMarket.checkout.queues[*].serviceTime = 3s
SuperMarket.checkout.classifier.policy = "jtsq"
SuperMarket.source.interArrivalTime = exponential(9.3s, 0)
SuperMarket.source.numberOfItems = (exponential(29, 1)+1)
SuperMarket.checkout.localSink[*].totalServiceTime.result-recording-modes = +vector  # default plus vector

# ---------------------------------------------------------



# Main Experiments ----------------------------------------

# First Main Experiment - Exponential
[FirstMainExperiment-Exponential]
sim-time-limit = 60s * 60 * 16
warmup-period = 10000s
repeat = 30
seed-set = ${repetition}
SuperMarket.C = 10
SuperMarket.checkout.queues[*].serviceTime = 3s
SuperMarket.checkout.classifier.policy = "jtsq"
SuperMarket.source.interArrivalTime = exponential(9.3s, 0)
SuperMarket.source.numberOfItems = (exponential(29, 1)+1)
SuperMarket.checkout.queues[*].queueingTime.result-recording-modes = +vector  # default plus vector
SuperMarket.globalSink.totalQueueingTime.result-recording-modes = +vector  # default plus vector

# a
[FirstMainExperiment-Exponential_a]
extends = FirstMainExperiment-Exponential
SuperMarket.checkout.p = ${0.1, 0.2, 0.3, 0.4, 0.5}
SuperMarket.checkout.classifier.K = ${9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}

# b
[FirstMainExperiment-Exponential_b]
extends = FirstMainExperiment-Exponential
SuperMarket.checkout.p = ${0.1, 0.2, 0.3}
SuperMarket.checkout.classifier.K = ${13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}


# First Main Experiment - Lognormal
[FirstMainExperiment-Lognormal]
sim-time-limit = 60s * 60 * 16
warmup-period = 10000s
repeat = 30
seed-set = ${repetition}
SuperMarket.C = 10
SuperMarket.checkout.queues[*].serviceTime = 3s
SuperMarket.checkout.classifier.policy = "jtsq"
SuperMarket.source.interArrivalTime = exponential(9.2s, 0)
SuperMarket.source.numberOfItems = (lognormal(3.02072, 0.83255, 1)+1)
SuperMarket.checkout.queues[*].queueingTime.result-recording-modes = +vector  # default plus vector
SuperMarket.globalSink.totalQueueingTime.result-recording-modes = +vector  # default plus vector

# a
[FirstMainExperiment-Lognormal_a]
extends = FirstMainExperiment-Lognormal
SuperMarket.checkout.p = ${0.1, 0.2, 0.3, 0.4, 0.5}
SuperMarket.checkout.classifier.K = ${9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}

# b
[FirstMainExperiment-Lognormal_b]
extends = FirstMainExperiment-Lognormal
SuperMarket.checkout.p = ${0.1, 0.2, 0.3}
SuperMarket.checkout.classifier.K = ${13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}

# ---------------------------------------------------------