//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Customer.msg.
//

#ifndef __QUEUEING_CUSTOMER_M_H
#define __QUEUEING_CUSTOMER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace queueing {

class Customer;

}  // namespace queueing


namespace queueing {

// cplusplus {{
#include "QueueingDefs.h"
// }}

/**
 * Class generated from <tt>Customer.msg:25</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message Customer
 * {
 *     int priority;                // queueing priority
 *     simtime_t totalQueueingTime; // total time spent standing in queues
 *     simtime_t totalServiceTime;  // total time spent in servers
 *     simtime_t totalDelayTime;    // total time spent in delay modules
 *     int queueCount;              // the number of queue modules visited by the job
 *     int delayCount;              // the number of delay modules visited by the job
 *     int generation;              // how many times the original ancestor was copied
 * 
 *     int numberOfItems;
 * }
 * </pre>
 */
class Customer : public ::omnetpp::cMessage
{
  protected:
    int priority = 0;
    ::omnetpp::simtime_t totalQueueingTime = SIMTIME_ZERO;
    ::omnetpp::simtime_t totalServiceTime = SIMTIME_ZERO;
    ::omnetpp::simtime_t totalDelayTime = SIMTIME_ZERO;
    int queueCount = 0;
    int delayCount = 0;
    int generation = 0;
    int numberOfItems = 0;

  private:
    void copy(const Customer& other);

  protected:
    bool operator==(const Customer&) = delete;

  public:
    Customer(const char *name=nullptr, short kind=0);
    Customer(const Customer& other);
    virtual ~Customer();
    Customer& operator=(const Customer& other);
    virtual Customer *dup() const override {return new Customer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getPriority() const;
    virtual void setPriority(int priority);

    virtual ::omnetpp::simtime_t getTotalQueueingTime() const;
    virtual void setTotalQueueingTime(::omnetpp::simtime_t totalQueueingTime);

    virtual ::omnetpp::simtime_t getTotalServiceTime() const;
    virtual void setTotalServiceTime(::omnetpp::simtime_t totalServiceTime);

    virtual ::omnetpp::simtime_t getTotalDelayTime() const;
    virtual void setTotalDelayTime(::omnetpp::simtime_t totalDelayTime);

    virtual int getQueueCount() const;
    virtual void setQueueCount(int queueCount);

    virtual int getDelayCount() const;
    virtual void setDelayCount(int delayCount);

    virtual int getGeneration() const;
    virtual void setGeneration(int generation);

    virtual int getNumberOfItems() const;
    virtual void setNumberOfItems(int numberOfItems);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Customer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Customer& obj) {obj.parsimUnpack(b);}


}  // namespace queueing


namespace omnetpp {

template<> inline queueing::Customer *fromAnyPtr(any_ptr ptr) { return check_and_cast<queueing::Customer*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __QUEUEING_CUSTOMER_M_H

